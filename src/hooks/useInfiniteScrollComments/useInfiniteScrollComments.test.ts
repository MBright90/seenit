// Generated by CodiumAI
import { setPostCommentsQuery } from '@src/utils/setQueries/setQueries'
import { Timestamp } from 'firebase/firestore'

import useInfiniteScrollComments from './useInfiniteScrollComments'

describe('useInfiniteScrollComments', () => {
  // Test that the 'loadCommentScroll' function correctly loads comments for a given post ID
  it('should load comments for a post ID when called with a valid post ID', async () => {
    const postID = '12345'
    const userID = null
    const commentsQuery = setPostCommentsQuery(postID, null)
    const querySnapshot = {
      docs: [
        {
          data: jest.fn().mockReturnValue({
            ID: 'comment1',
            postID: '12345',
            timeStamp: '2022-01-01',
            authorID: 'user1',
            body: 'Comment 1',
            score: 0,
            userInteractions: [],
            edited: false
          })
        },
        {
          data: jest.fn().mockReturnValue({
            ID: 'comment2',
            postID: '12345',
            timeStamp: '2022-01-02',
            authorID: 'user2',
            body: 'Comment 2',
            score: 0,
            userInteractions: [],
            edited: false
          })
        }
      ]
    }
    const getDocsMock = jest.fn().mockResolvedValue(querySnapshot)
    const setCommentsMock = jest.fn()
    const setLastDocMock = jest.fn()

    jest.mock('firebase/firestore', () => ({
      getDocs: getDocsMock
    }))

    jest.mock('@src/utils/setQueries', () => ({
      setPostCommentsQuery: jest.fn().mockReturnValue(commentsQuery)
    }))

    jest.mock('react', () => ({
      useState: jest
        .fn()
        .mockReturnValueOnce([[], setCommentsMock])
        .mockReturnValueOnce([null, setLastDocMock]),
      useRef: jest.fn().mockReturnValue({ current: null })
    }))

    const { loadCommentScroll } = require('./useInfiniteScrollComments')

    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    await loadCommentScroll(postID, userID)

    expect(setCommentsMock).toHaveBeenCalledWith([
      {
        ID: 'comment1',
        postID: '12345',
        timeStamp: '2022-01-01',
        authorID: 'user1',
        body: 'Comment 1',
        score: 0,
        userInteractions: [],
        edited: false
      },
      {
        ID: 'comment2',
        postID: '12345',
        timeStamp: '2022-01-02',
        authorID: 'user2',
        body: 'Comment 2',
        score: 0,
        userInteractions: [],
        edited: false
      }
    ])
    expect(setLastDocMock).toHaveBeenCalledWith(querySnapshot.docs[querySnapshot.docs.length - 1])
  })

  // Test that the 'loadCommentScroll' function correctly loads comments for a given post ID
  it('should load comments for a post ID when called with a valid post ID', async () => {
    const postID = '12345'
    const userID = null
    const commentsQuery = setPostCommentsQuery(postID, null)
    const querySnapshot = {
      docs: [
        {
          data: jest.fn().mockReturnValue({
            ID: 'comment1',
            postID: '12345',
            timeStamp: '2022-01-01',
            authorID: 'user1',
            body: 'Comment 1',
            score: 0,
            userInteractions: [],
            edited: false
          })
        },
        {
          data: jest.fn().mockReturnValue({
            ID: 'comment2',
            postID: '12345',
            timeStamp: '2022-01-01',
            authorID: 'user2',
            body: 'Comment 2',
            score: 0,
            userInteractions: [],
            edited: false
          })
        }
      ]
    }
    const getDocsMock = jest.fn().mockResolvedValue(querySnapshot)
    const setCommentsMock = jest.fn()
    const setLastDocMock = jest.fn()

    // Mock dependencies
    jest.mock('firebase/firestore', () => ({
      getDocs: getDocsMock
    }))
    jest.mock('react', () => ({
      useState: jest
        .fn()
        .mockReturnValueOnce([[], setCommentsMock])
        .mockReturnValueOnce([null, setLastDocMock]),
      useRef: jest.fn().mockReturnValue({ current: null })
    }))
    jest.mock('@src/utils/setQueries', () => ({
      setPostCommentsQuery: jest.fn().mockReturnValue(commentsQuery)
    }))

    const { loadCommentScroll } = require('./useInfiniteScrollComments')
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    await loadCommentScroll(postID, userID)

    expect(setCommentsMock).toHaveBeenCalledWith([
      {
        ID: 'comment1',
        postID: '12345',
        timeStamp: expect.any(Timestamp),
        authorID: 'user1',
        body: 'Comment 1',
        score: 0,
        userInteractions: [],
        edited: false
      },
      {
        ID: 'comment2',
        postID: '12345',
        timeStamp: expect.any(Timestamp),
        authorID: 'user2',
        body: 'Comment 2',
        score: 0,
        userInteractions: [],
        edited: false
      }
    ])
    expect(setLastDocMock).toHaveBeenCalledWith(querySnapshot.docs[querySnapshot.docs.length - 1])
  })

  // Test that the function handles errors when loading comments
  it('should handle error loading comments', async () => {
    const mockError = new Error('Error loading comments')
    jest.spyOn(console, 'error').mockImplementation(() => {})

    const initialComments = [
      {
        ID: '1',
        postID: 'post1',
        timeStamp: Timestamp.now(),
        authorID: 'user1',
        body: 'Comment 1',
        score: 0,
        userInteractions: []
      }
    ]
    const scrollComments = useInfiniteScrollComments()
    await scrollComments.loadCommentScroll('post1')

    expect(scrollComments.comments).toEqual(initialComments)
    // eslint-disable-next-line no-console
    expect(console.error).toHaveBeenCalledWith('Error loading users comments:', mockError)
  })
})
